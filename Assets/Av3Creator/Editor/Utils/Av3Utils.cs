#region
using Av3Creator.Core;
using Av3Creator.Windows;
using System;
using System.IO;
using System.Linq;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;
using VRC.SDK3.Avatars.Components;
using VRC.SDK3.Avatars.ScriptableObjects;
using Object = UnityEngine.Object;
#endregion

namespace Av3Creator.Utils
{
    public static class Av3Utils
    {
        public static VRCAvatarDescriptor SelectCurrentAvatar()
        {
            VRCAvatarDescriptor vrcAvatarDescriptor = null;
            if (Selection.activeTransform && Selection.activeTransform?.root?.gameObject?.GetComponent<VRCAvatarDescriptor>() != null)
            {
                vrcAvatarDescriptor = Selection.activeTransform.root.GetComponent<VRCAvatarDescriptor>();
                if (vrcAvatarDescriptor != null)
                    return vrcAvatarDescriptor;
            }

            var gameObjects = Object.FindObjectsOfType<VRCAvatarDescriptor>().OrderBy(x => x.transform.GetSiblingIndex()).ToArray();
            if (gameObjects != null && gameObjects.Length > 0)
            {
                if (gameObjects.Any(x => x.gameObject.activeSelf))
                    vrcAvatarDescriptor = gameObjects.First(x => x.gameObject.activeSelf);
                else vrcAvatarDescriptor = gameObjects.First();
            }

            return vrcAvatarDescriptor;
        }


        private static readonly string GeneratedA3CText = "Generated by A3C - Click here for more info!";
        public static void GenerateCredits(AnimatorController fxLayer)
        {
            if (fxLayer.layers.Any(x => x.name == GeneratedA3CText)) fxLayer.RemoveLayer(GeneratedA3CText);

            fxLayer.AddLayer(GeneratedA3CText);
            var creditLayer = fxLayer.layers[fxLayer.layers.Length - 1];

            creditLayer.stateMachine.entryPosition = new Vector3(20, 0);
            creditLayer.stateMachine.anyStatePosition = creditLayer.stateMachine.entryPosition - new Vector3(220, 0);
            creditLayer.stateMachine.exitPosition = creditLayer.stateMachine.entryPosition + new Vector3(220, 0);

            void CreateState(string name, int x, int y) => EditorUtility.SetDirty(creditLayer.stateMachine.AddState(name, new Vector3(x, y)));

            CreateState("Toggles generated by Av3Creator!", 0, 50);
            CreateState("rafa booth pm", -105, 100);
            CreateState("rafacasari gumroad com", 105, 100);
        }

        public enum Av3WriteDefaultsMode
        {
            None,
            Mixed,
            On,
            Off
        }

        public static Av3WriteDefaultsMode GetWriteDefaults(VRCAvatarDescriptor avatarDescriptor)
        {
            try
            {
                if (avatarDescriptor == null) return Av3WriteDefaultsMode.None;

                //var animationLayers = new System.Collections.Generic.List<VRCAvatarDescriptor.CustomAnimLayer>();            
                //animationLayers.AddRange(avatarDescriptor.baseAnimationLayers);
                //animationLayers.AddRange(avatarDescriptor.specialAnimationLayers);

                //if (animationLayers.Count(x => x.animatorController != null) == 0) return Av3WriteDefaultsMode.Mixed;

                var currentMode = Av3WriteDefaultsMode.None;
                //foreach (var animationLayer in animationLayers)
                if (avatarDescriptor.baseAnimationLayers.First(x => !x.isDefault && x.animatorController != null && x.type == VRCAvatarDescriptor.AnimLayerType.FX) is VRCAvatarDescriptor.CustomAnimLayer animationLayer)
                {
                    if (animationLayer.animatorController == null || !(animationLayer.animatorController is AnimatorController animator)) return Av3WriteDefaultsMode.Mixed;

                    foreach (var layer in animator.layers)
                    {
                        foreach (var state in layer.stateMachine.states)
                        {
                            if ((state.state.writeDefaultValues && currentMode != Av3WriteDefaultsMode.On && currentMode != Av3WriteDefaultsMode.None) ||
                                (!state.state.writeDefaultValues && currentMode != Av3WriteDefaultsMode.Off && currentMode != Av3WriteDefaultsMode.None))
                            {
                                return Av3WriteDefaultsMode.Mixed;
                            }
                            else currentMode = state.state.writeDefaultValues ? Av3WriteDefaultsMode.On : Av3WriteDefaultsMode.On;
                        }

                        Av3WriteDefaultsMode SubStateMachines(ChildAnimatorStateMachine[] states)
                        {
                            if (currentMode == Av3WriteDefaultsMode.Mixed) return Av3WriteDefaultsMode.Mixed;

                            foreach (var subState in states)
                            {
                                foreach (var state in subState.stateMachine.states)
                                {
                                    if ((state.state.writeDefaultValues && currentMode != Av3WriteDefaultsMode.On && currentMode != Av3WriteDefaultsMode.None) ||
                                        (!state.state.writeDefaultValues && currentMode != Av3WriteDefaultsMode.Off && currentMode != Av3WriteDefaultsMode.None))
                                    {
                                        return Av3WriteDefaultsMode.Mixed;
                                    }
                                    else currentMode = state.state.writeDefaultValues ? Av3WriteDefaultsMode.On : Av3WriteDefaultsMode.On;
                                }

                                SubStateMachines(subState.stateMachine.stateMachines);
                            }

                            return currentMode;
                        }

                        SubStateMachines(layer.stateMachine.stateMachines);
                        if (currentMode == Av3WriteDefaultsMode.Mixed)
                            return Av3WriteDefaultsMode.Mixed;
                    }
                }
                return currentMode;
            } catch(Exception error)
            {
                Debug.LogError(error);
                return Av3WriteDefaultsMode.None;
            }
        }


        private static readonly string EmptyAnimationPath = AssetDatabase.GUIDToAssetPath("b146fcd37dbc7734dadd974b87aec8df");
        public static AnimationClip GetOrCreateEmptyAnimation(string animationDirectory)
        {
            var emptyAnimationPath = animationDirectory + "/Empty Animation.anim";
            if (File.Exists(emptyAnimationPath) || (!string.IsNullOrEmpty(EmptyAnimationPath) && !File.Exists(emptyAnimationPath) && AssetDatabase.CopyAsset(EmptyAnimationPath, emptyAnimationPath)))
                return AssetDatabase.LoadAssetAtPath<AnimationClip>(emptyAnimationPath);
            else if (string.IsNullOrEmpty(EmptyAnimationPath))
                Debug.LogWarning("Can't find Av3Creator Empty Animation!");
            return null;
        }

        public static void ShowMenuSelector(VRCAvatarDescriptor avatarDescriptor, Action<VRCExpressionsMenu> returnValueAction)
        {
            var menuSelector = ScriptableObject.CreateInstance<SelectMenu>();
            menuSelector.minSize = new Vector2(260, 340);
            menuSelector.titleContent = new GUIContent("Select Menu");
            menuSelector.SetDescriptor(avatarDescriptor);
            menuSelector.OnSelectedMenu += returnValueAction;
            menuSelector.ShowUtility();
        }
    }
}